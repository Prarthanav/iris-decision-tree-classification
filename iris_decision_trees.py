# -*- coding: utf-8 -*-
"""iris_decision_trees.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cCG2x7uoF6QgU7_SEziBChkHQ6ozOgCT

###**Importing the required libraries**
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
# %matplotlib inline
from sklearn import tree

#setting the size of the figures using matplotlib
plt.rcParams['figure.figsize'] = (15.0, 5.0)

"""### **Importing the dataset 'Iris'**"""

df = pd.read_csv('Iris.csv')

df.head()

"""### **Dropping the column 'Id' as it was irrelevent for the given problem statement**"""

df.drop(["Id"],axis=1,inplace=True)
df.head()

df.info()

df.describe()

"""### **Checking for the null values**"""

df.isnull().sum()

"""there are no null values

### **Importing more libraries**
"""

from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier, export_graphviz
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix

"""## **EDA**"""

sns.countplot("SepalLengthCm",data=df)

sns.countplot("SepalWidthCm",data=df)

sns.countplot("PetalLengthCm",data=df)

sns.countplot("PetalWidthCm",data=df)

#feature selection, x=independent and y=dependent
x=df.iloc[:,df.columns!="Species"]
y=df.iloc[:,df.columns=="Species"]

y.head()

"""### **Splitting the data for training and testing**"""

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.30,random_state=0)

"""### **Applying the Decision tree algorithm**"""

model=DecisionTreeClassifier()

"""###**Training**"""

model.fit(x_train,y_train)

"""### **Testing and Visualisation**"""

outputDTC=model.predict(x_test)
print(outputDTC) #predicted

names=['SepalLengthCm','SepalWidthCm','PetalLengthCm','PetalWidthCm']
classes=['setosa','versicolor','virginica']
fig,axes=plt.subplots(nrows=1,ncols=1,figsize=(4,4),dpi=300)
tree.plot_tree(model,feature_names=names,class_names=classes,filled= True);

"""### **Accuracy score**"""

accuracy=accuracy_score(y_test,outputDTC)
print("accuracy score:",accuracy)

"""### **Confusion matrix**"""

confusion_matrix(y_test,outputDTC)